#!/usr/bin/perl -w
#
# Copyright (C) 2004 Jimmy Olsen, Dagfinn Ilmari Mannsaaker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#
# $Log$
# Revision 1.18  2004/12/10 18:51:43  jimmyo
# linux/apt* has been forced to LANG=C, to get predictable output.
#
# Revision 1.17  2004/12/10 10:47:47  jimmyo
# Change name from ${scale} to ${graph_period}, to be more consistent.
#
# Revision 1.16  2004/12/09 22:12:55  jimmyo
# Added "graph_period" option, to make "graph_sums" usable.
#
# Revision 1.15  2004/11/21 00:16:56  jimmyo
# Changed a lot of plugins so they use DERIVE instead of COUNTER.
#
# Revision 1.14  2004/11/20 22:37:21  jimmyo
# Strip strange characters.
#
# Revision 1.13  2004/11/20 22:10:49  jimmyo
# Clean up output of plugin a bit.
#
# Revision 1.12  2004/11/20 22:06:22  jimmyo
# Clean up output of plugin a bit.
#
# Revision 1.11  2004/11/16 20:08:26  jimmyo
# License cleanups.
#
# Revision 1.10  2004/11/12 20:28:03  ilmari
# No debugging info by default
#
# Revision 1.9  2004/09/08 15:25:33  ilmari
# Use @@PERL@@ in all perl shebang lines.
#
# Revision 1.8  2004/09/07 13:19:22  ilmari
# SNMP plugins now honour the "host" environment variable if they can't deduce the hostname from zsh.
#
# Revision 1.7  2004/09/05 12:00:18  jimmyo
# Set family and capabilities.
#
# Revision 1.6  2004/09/04 21:58:28  jimmyo
# Set category and info fields.
#
# Revision 1.5  2004/09/04 19:12:14  jimmyo
# Accept ppp interfaces as well as ethernet interfaces.
#
# Revision 1.4  2004/04/30 16:58:14  jimmyo
# Added max.
#
# Revision 1.3  2004/02/22 20:17:58  jimmyo
# Typo fix
#
# Revision 1.2  2004/02/18 21:54:56  jimmyo
# Did a bit of work on the snmp-thingie.
#
# Revision 1.1  2004/01/02 18:50:00  jimmyo
# Renamed occurrances of lrrd -> munin
#
# Revision 1.1.1.1  2004/01/02 15:18:07  jimmyo
# Import of LRRD CVS tree after renaming to Munin
#
# Revision 1.1  2003/12/19 20:53:45  jimmyo
# Created by jo
#
#
#%# family=snmpauto
#%# capabilities=snmpconf

use warnings;
use strict;
use Net::SNMP;

my $DEBUG = 1;

my $host      = $ENV{host}      || undef;
my $port      = $ENV{port}      || 161;
my $community = $ENV{community} || "public";
my $iface     = $ENV{interface} || undef;
# grupo 
my $group      = $ENV{group}     || "Network";

my $response;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf")
{
	print "number  1.3.6.1.2.1.2.1.0\n";
	print "index   1.3.6.1.2.1.2.2.1.1.\n";
	print "require 1.3.6.1.2.1.2.2.1.3. ^(6|23)\$\n"; # Type
	print "require 1.3.6.1.2.1.2.2.1.5. [1-9]\n"; # Speed
	exit 0;
}

# aÃ±adido match al regexp para especificar grupo
if ($0 =~ /^(?:|.*\/)snmp(?:|_(.*))_([^_]+)_if_(.+)$/)
{
	$group = $1;
	$host  = $2;
	$iface = $3;
	if ($host =~ /^([^:]+):(\d+)$/)
	{
		$host = $1;
		$port = $2;
	}
}
elsif (!defined($host))
{
	print "# Debug: $0 -- $1 -- $2 -- $3\n" if $DEBUG;
	die "# Error: couldn't understand what I'm supposed to monitor.";
}

my $ifEntryDescr     = "1.3.6.1.2.1.2.2.1.2.$iface"; 
my $ifEntrySpeed     = "1.3.6.1.2.1.2.2.1.5.$iface";
my $ifEntryStatus    = "1.3.6.1.2.1.2.2.1.8.$iface";
my $ifEntryInOctets  = "1.3.6.1.2.1.2.2.1.10.$iface";
my $ifEntryOutOctets = "1.3.6.1.2.1.2.2.1.16.$iface";

# OIDs extra para vlans cisco/enterasys
# interface name -snmpv2-
my $ifName = "1.3.6.1.2.1.31.1.1.1.1.$iface";
# alias int -snmpv2-
my $ifAlias             = "1.3.6.1.2.1.31.1.1.1.18.$iface";
# port vlan id -Cisco-
my $vmMembershipEntry   = "1.3.6.1.4.1.9.9.68.1.2.2.1.2.$iface";
# vlan name -Cisco- 
my $vtpVlanName         = "1.3.6.1.4.1.9.9.46.1.3.1.1.4.1";
#
my $dot1dBasePortIfIndex = "1.3.6.1.2.1.17.1.4.1.2.$iface";
# port vlan id -Enterasys-
my $dot1qPvid 	        = "1.3.6.1.2.1.17.7.1.4.5.1.1.$iface";
# vlan name -Enterasys-
my $dot1qVlanStaticName = "1.3.6.1.2.1.17.7.1.4.3.1.1";

my ($session, $error) = Net::SNMP->session(
		-hostname  => $host,
		-community => $community,
		-port      => $port
	);

if (!defined ($session))
{
	die "Croaking: $error";
}
	
print $dot1dBasePortIfIndex; 

if (defined ($response = $session->get_request($dot1dBasePortIfIndex)))
	{	
		my $tmp= $response->{$dot1dBasePortIfIndex};	
		print "$tmp\n";
}
exit 0;


if ($ARGV[0] and $ARGV[0] eq "config")
{
	if ($group)
	{
		print "host_name $group\n";
	} 
	else 
	{
		print "host_name $host\n";
	}
	
	my $name = undef;
	if (!defined ($response = $session->get_request($ifName)))
	{
		if (!defined ($response = $session->get_request($ifEntryDescr)))
		{
			die "Croaking: " . $session->error();
		}
		else
		{
			 $name = $response->{$ifEntryDescr};
		}
	}
	else
	{
		$name = $response->{$ifName};
		#$name =~ s/[^\w\s]//g;
	}
	my $warn = undef;
	if (defined ($response = $session->get_request($ifEntrySpeed)))
	{
		$warn = $response->{$ifEntrySpeed}/8;
	}

#Creamos variable 'info' con Vlan+Nombre de Vlan si aplica las oid de Cisco o Enterasys.
	my $info = undef;
	if (defined ($response = $session->get_request($vmMembershipEntry)))
	{
		my $vlanid = $response->{$vmMembershipEntry};
		if (defined ($response = $session->get_request($vtpVlanName.".".$vlanid)))
	        {
        	        $info = "Vlan $vlanid (" . $response->{$vtpVlanName.".".$vlanid} . ") ";

	        }
	}
	elsif (defined ($response = $session->get_request($dot1dBasePortIfIndex)))
	{	
		my $vlanid = $response->{$dot1dBasePortIfIndex};	
	        if (defined ($response = $session->get_request($dot1qVlanStaticName.".".$vlanid)))
		{
			$info = "Vlan $vlanid (" . $response->{$dot1qVlanStaticName.".".$vlanid} . ") ";
		}
	}	
	else
	{
		$info = "";
	}

#Anexamos Alias si aplica
	if ( (defined ($response = $session->get_request($ifAlias))) && (length($response->{$ifAlias}) > 2) )
        {
        	$info .= "Alias ".$response->{$ifAlias};
	}
	
#Graph
	print "graph_title Interface $name $info\n";
	print "graph_order recv send\n";
	print "graph_args --base 1000\n";
	print "graph_vlabel bits in (G) / out (B) per \${graph_period}\n";
        if ($group) 
	{
		print "graph_category $host\n";
	}
        else 
	{
		print "graph_category Network\n";
        }
	print "graph_info This graph shows traffic for the \"$name\" network interface.\n";
#recv
	print "recv.label In\n";
	print "recv.draw LINE1\n";
	print "recv.type DERIVE\n";
	print "recv.cdef recv,8,*\n";
	print "recv.max 2000000000\n";
	print "recv.min 0\n";
	print "recv.warn ", (-$warn), "\n" if defined $warn;
#send
        print "send.info Bits sent/received by this interface.\n";
	print "send.label Out\n";
	print "send.draw LINE1\n";
	print "send.type DERIVE\n";
	print "send.cdef send,8,*\n";
	print "send.max 2000000000\n";
	print "send.min 0\n";
	print "send.warn $warn\n" if defined $warn;
	exit 0; 
}

my $status = 1;
if (defined ($response = $session->get_request($ifEntryStatus)))
{
	$status = $response->{$ifEntryStatus};
}

if ($status == 2)
{
	print "recv.value U\n";
	print "send.value U\n";
	exit 0;
}

if (defined ($response = $session->get_request($ifEntryInOctets)))
{
	print "recv.value ", $response->{$ifEntryInOctets}, "\n";
}
else
{
	print "recv.value U\n";
}

if (defined ($response = $session->get_request($ifEntryOutOctets)))
{
	print "send.value ", $response->{$ifEntryOutOctets}, "\n";
}
else
{
	print "send.value U\n";
}
